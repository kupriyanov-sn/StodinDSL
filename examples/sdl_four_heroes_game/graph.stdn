import sdl
import ^ color
import ^ hero

const SCREEN_WIDTH @int 305
const SCREEN_HEIGHT @int 130

struct Graph
    *renderer @Renderer 0
    *window @Window 0

def init
    mref graph:Graph
    @sdl:init SDL_INIT_VIDEO
    @sdl:set_hint SDL_HINT_RENDER_SCALE_QUALITY "1"
    graph.window @sdl:create_window "4â–¡" SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED SCREEN_WIDTH SCREEN_HEIGHT SDL_WINDOW_SHOWN
    graph.renderer graph.window @sdl:create_renderer -1 SDL_RENDERER_ACCELERATED
    graph.renderer @sdl:set_render_draw_color 0x0F 0x0F 0x0F 0xFF
    
def close
    mref graph:Graph
    graph.renderer @sdl:destroy_renderer
    graph.window @sdl:destroy_window
    @sdl:quit

def clear_background
    mref graph:Graph
    graph.renderer @sdl:set_render_draw_color 0x0F 0x0F 0x0F 0xFF
    graph.renderer @sdl:render_clear

def repaint
    mref graph:Graph
    graph.renderer @sdl:render_present

const _HERO_SIZE @i32 25

def _draw_square
    mref graph:Graph
    cref clr:SDL_Color x:i32 y:i32
    *w @i32 _HERO_SIZE
    *h @i32 _HERO_SIZE
    *fillRect @SDL_Rect x y w h
    graph.renderer @sdl:set_render_draw_color clr.r clr.g clr.b clr.a
    graph.renderer @sdl:render_fill_rect fillRect

const _POSITIONS @array|i32 10 45 80 115 165 200 235 270
const _HERO_Y @i32 30

def draw_hero_square
    mref graph:Graph
    cref color:u8 pos:int
    *clr @SDL_Color @^color:transform_hero_color color
    graph @_draw_square clr _POSITIONS|pos _HERO_Y

def draw_health_rect
    mref graph:Graph
    cref pos:int percent:int maxHealth:int
    *w @i32 _HERO_SIZE * percent / 100
    if > w _HERO_SIZE
        w = _HERO_SIZE
    if < w 0
        w = 0
    *wMax @i32 _HERO_SIZE * maxHealth / 100
    if > wMax _HERO_SIZE
        wMax = _HERO_SIZE
    if < wMax 0
        wMax = 0
    *h @i32 5
    *x @i32 _HERO_SIZE - wMax / 2 + _POSITIONS|pos
    *rect @SDL_Rect x 70 w h
    graph.renderer @sdl:set_render_draw_color 50 200 50 255
    graph.renderer @sdl:render_fill_rect rect
    graph.renderer @sdl:set_render_draw_color 200 200 200 255
    rect.w = wMax    
    graph.renderer @sdl:render_draw_rect rect

def draw_selected_hero_frame
    mref graph:Graph
    cref pos:int
    *w @i32 _HERO_SIZE + 6
    *h @i32 _HERO_SIZE + 6
    *x @i32 _POSITIONS|pos - 3
    *y @i32 _HERO_Y - 3
    *outlinedRect @SDL_Rect x y w h
    graph.renderer @sdl:set_render_draw_color 0xAA 0xAA 0xAA 0xFF
    graph.renderer @sdl:render_draw_rect outlinedRect
    
def draw_all_heroes
    mref graph:Graph
    cref goodHeroes:array|Hero badHeroes:array|Hero good:bool goodPointer:int badPointer:int actionFramesFlag:bool
    *counter @int 3
    for *hero in goodHeroes
        graph @draw_hero_square hero.type$u8 counter
        graph @draw_health_rect counter hero.health hero.maxHealth
        graph @draw_state_square hero counter
        counter - 1
    counter = 4
    for *hero in badHeroes
        graph @draw_hero_square hero.type$u8 counter
        graph @draw_health_rect counter hero.health hero.maxHealth
        graph @draw_state_square hero counter
        counter + 1
    if good
        *gsz @int @size goodHeroes
        if < goodPointer gsz
            *flag @bool actionFramesFlag && goodHeroes|goodPointer|.stunned
            ifnot flag
                *actionCounter @int 0
                for *action in goodHeroes|goodPointer|.actions
                    graph @draw_action_square action$u8 actionCounter
                    actionCounter + 1
            counter = 3 - goodPointer
            graph @draw_selected_hero_frame counter
    else
        *bsz @int @size badHeroes
        if < badPointer bsz
            *actionCounter @int 4
            for *action in badHeroes|badPointer|.actions
                graph @draw_action_square action$u8 actionCounter
                actionCounter + 1
            counter = 4 + badPointer
            graph @draw_selected_hero_frame counter

def draw_splitter
    mref graph:Graph
    *fillRect @SDL_Rect 150 0 5 SCREEN_HEIGHT
    graph.renderer @sdl:set_render_draw_color 200 200 200 255
    graph.renderer @sdl:render_fill_rect fillRect

def draw_frame
    mref graph:Graph
    cref color:u8 x:i32
    *outlinedRect @SDL_Rect x 90 130 30
    graph.renderer @sdl:set_render_draw_color color 0xDD 0xCC 0xFF
    graph.renderer @sdl:render_draw_rect outlinedRect

const _ACTION_POSITIONS @array|i32 20 50 80 110 175 205 235 265
const _ACTION_SIZE @i32 20
const _ACTION_Y @i32 95

def draw_action_square
    mref graph:Graph
    cref color:u8 pos:int
    *w @i32 _ACTION_SIZE
    *h @i32 _ACTION_SIZE
    *fillRect @SDL_Rect _ACTION_POSITIONS|pos _ACTION_Y w h
    *clr @SDL_Color @^color:transform_action_color color
    graph.renderer @sdl:set_render_draw_color clr.r clr.g clr.b clr.a
    graph.renderer @sdl:render_fill_rect fillRect

def draw_action_frame
    mref graph:Graph
    cref pos:int
    *w @i32 _ACTION_SIZE + 4
    *h @i32 _ACTION_SIZE + 4
    *x @i32 _ACTION_POSITIONS|pos - 2
    *y @i32 _ACTION_Y - 2
    *fillRect @SDL_Rect x y w h
    graph.renderer @sdl:set_render_draw_color 255 255 255 255
    graph.renderer @sdl:render_draw_rect fillRect

def draw_state_square
    mref graph:Graph
    cref hero:Hero pos:int
    *w @i32 5
    *h @i32 5
    *x @i32 _POSITIONS|pos
    *fillRect @SDL_Rect x 20 w h
    if hero.stunned
        fillRect.x = _POSITIONS|pos + 5
        graph.renderer @sdl:set_render_draw_color 200 200 0 255
        graph.renderer @sdl:render_fill_rect fillRect
    if hero.inspired
        fillRect.x = _POSITIONS|pos + 10
        graph.renderer @sdl:set_render_draw_color 100 100 255 255
        graph.renderer @sdl:render_fill_rect fillRect
    if hero.shielded
        fillRect.x = _POSITIONS|pos + 15
        graph.renderer @sdl:set_render_draw_color 255 165 0 255
        graph.renderer @sdl:render_fill_rect fillRect
    

def draw_target_hero_frame
    mref graph:Graph
    cref pos:int clr:SDL_Color
    *w @i32 _HERO_SIZE + 6
    *h @i32 _HERO_SIZE + 6
    *x @i32 _POSITIONS|pos - 3
    *y @i32 _HERO_Y - 3
    *outlinedRect @SDL_Rect x y w h
    graph.renderer @sdl:set_render_draw_color clr.r clr.g clr.b clr.a
    graph.renderer @sdl:render_draw_rect outlinedRect

def draw_animation
    mref graph:Graph
    cref indices:array|int action:HeroAction
    if != action HeroAction^None 
        #@show_message TargetType^None action$int
        *clr @SDL_Color @transform_action_color action$u8
        for *i in indices
            graph @draw_target_hero_frame i clr
    
enum TargetType @u8 None Hero Action

def _check_mouse
    mref target:TargetType pos:int
    cref x:int y:int
    target = TargetType^None
    pos = -1
    *bottom @int _HERO_Y + _HERO_SIZE
    for *i @int in 0;8;1
        *right @int _POSITIONS|i + _HERO_SIZE
        *onHero @bool > y _HERO_Y ? x _POSITIONS|i < y bottom; x right
        if onHero
            *indexString @string @to_string i
            *message @string "on hero: " + indexString
            target = TargetType^Hero
            pos = i
            break
    bottom = _ACTION_Y + _ACTION_SIZE
    for *i @int in 0;8;1
        *right @int _ACTION_POSITIONS|i + _ACTION_SIZE
        *onAction @bool > y _ACTION_Y ? x _ACTION_POSITIONS|i < y bottom; x right
        if onAction
            *indexString @string @to_string i
            *message @string "on action: " + indexString
            target = TargetType^Action
            pos = i
            if > pos 3
                pos - 4
            break


def get_state
    mref target:TargetType pos:int quitFlag:bool
    target = TargetType^None
    pos = -1
    *e @Event
    for
        *res @int 0
        res e @sdl:poll_event
        ifnot res
            break
        if e.type SDL_QUIT
            quitFlag = true
        if e.type SDL_MOUSEBUTTONDOWN
            *mouseState @u32 0
            *x; *y @int 0
            mouseState x y @sdl:get_mouse_state
            target pos @_check_mouse x y

def show_message
    cref target:TargetType pos:int
    *indexString @string @to_string pos
    *message @string
    if target TargetType^Hero
        message + "on hero: " indexString
    else
        message + "on action: " indexString
    @sdl:show_simple_message_box 0 "title" message

def delay
    cref delay:int
    @sdl:delay delay
